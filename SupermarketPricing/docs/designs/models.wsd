@startuml diagram name
title
Models in the system
end title

' component test{}
' package Domain{}
' package Application{}
' package Infrastructure{}


' frame BusinessRules{

    '     interface BusinessRule{
        '         + IsBroken():bool
        '         + Message:string
        '
    ' }

    '     class ApplicableDiscountQuantityMustBeGreaterThanZero implements BusinessRule{
        '         + IsBroken():bool
        '         + Message:string
        '
    ' }
    '
' }

'.. important items in this model
'-----------------------------------------
'.. Item
'.. Bill/Ticket
'.. Price
'.. Discount
'.. Stock/Qty




class Price 
{
    --
    + Amount:decimal
    + Currency:string
}

note right of IItem
    this is the base interface
    for all items and serves as 
    base for discount decorators
end note
interface IItem{

    + Id:Guid
    + Name:string
    + Price:Price
    + StockQuantity:int
}

note left of Item
    more props can be added
    as category of ItemType, etc
end note
class Item implements IItem{
    + ctor
    --
    + Id:Guid
    + Name:string
    + Price:Price
    + StockQuantity:int
}

note right of DiscountDetectorAndApplier
    this class is responsible for
    detecting and applying discounts
    to items
end note
class DiscountDetectorAndApplier{
+ctor(items:Item[])
--
+


}


'.. this would be the rule to apply a discount to an item
'.. this could be based off on qty or just a percentage or whatever else
'.. should accomodate any type of discount i could think of

'.. usar strategy para definir el tipo de descuento
frame DiscountTypes {

note bottom of    BogoDiscount 
price = item.Price * discountPercentage
end note
    class BogoDiscount implements IItem{
        +ctor(item:IItem ,  discountPercentage:decimal)
        --
        - discountPercentage:decimal
        - item:IItem
        --
        +Price:Price
    }

note bottom of    VolumeDiscount 
price = item.Price * discountPercentage
end note
    class VolumeDiscount implements IItem{
        +ctor(item:IItem ,  discountPercentage:decimal)
        --
        - discountPercentage:decimal
        - item:IItem
        --
        +Price:Price
    }

note bottom of    SeasonalDiscount 
price = item.Price * discountPercentage
end note
    class SeasonalDiscount implements IItem{
        +ctor(item:IItem ,  discountPercentage:decimal)
        --
        - discountPercentage:decimal
        - item:IItem
        --
        +Price:Price
    }

note bottom of    LoyaltyDiscount 
price = item.Price * discountPercentage
end note
    class LoyaltyDiscount implements IItem{
        +ctor(item:IItem ,  discountPercentage:decimal)
        --
        - discountPercentage:decimal
        - item:IItem
        --
        +Price:Price
    }

}

class ItemDiscountTimeFrame {
    --
    +ItemId:Guid
    +StartDate:DateTime
    +EndDate:DateTime
}

class Bill {
}





'.. important basic rules (first-run)
'-----------------------------------------
'.. every single item has to have a price
'.. a bill/ticket has to have at least one item
'.. all discounts have a start and end date
'.. an item can NEVER have a price lower or equal to zero (0.0, -1.0, etc)


'.. some playful business rules
'-----------------------------------------

'.. in order to sell an item, it has to be in stock (qty >=1)

'.. discounts can come in the following forms:
'.. - % off an item's price
'.. - fixed amount off an item's price
'..     - discounts types:
'..         - buy one, get one (BOGO, this could be an x qty of items for the price of y qty of items, ie: buy 1 get 1 free, buy 2 get 1 free, etc)
'..         - volume discount: the more you buy the more you get discounted, this is a % off based on the total amount, up to a maximum amount of items bought
'..             the diff with the above one is that the above one is rather a fixed % over a fixed qty of items
'..         - seasonal discounts (ie: christmas, black friday, etc)
'..         - loyalty discounts (ie: on your X purchase you get Y% off on Z item)

'.. - some discounts may be combined with others depending on the discount type (ie: loyalty + seasonal, but not volume + seasonal, etc)


'.. - discount applicability (creation/update) has to be audited, i should be able to trace when an item was discounted and by how much
'.. - price change (creation/update) has to be audited, i should be able to trace when an item has changed price and by how much
'.. - start and end dates must have 00:00 and 23:59 times respectively (ie: start: 03/03/2023 00:00, end: 03/08/2023 23:59)
'.. - a bill/ticket must have a specific format (TBD the format details)
'..     - should be able to be stored in some sort of storage (ie: database)
'.. - taxes
'..     - a tax is a percentage of the item's price that has been included in the price
'..     - different taxes can be applied to an item
'..         - there will be a base price which represents the raw price of the item
'..         - the tax applied to an item will be listed in the bill/ticket
'..             - if in a bill there are items wich have different taxes, then the bill will group the total price for the items with the same tax and indicate what's the tax percentage applied and base price for the group summarized









@enduml
